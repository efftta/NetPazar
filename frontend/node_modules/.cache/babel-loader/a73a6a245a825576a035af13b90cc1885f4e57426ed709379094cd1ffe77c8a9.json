{"ast":null,"code":"// frontend/src/api/userApi.js (GÜNCEL HALİ - Ödeme Yöntemleri API çağrıları eklendi)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api\";\n\n// ... (Mevcut fetchUserAddresses, addAddress, updateAddress, deleteAddress fonksiyonları burada) ...\n\n// YENİ: Kullanıcının tüm ödeme yöntemlerini getir\nexport const fetchUserPaymentMethods = async token => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemleri alınamadı.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"fetchUserPaymentMethods API hatası:\", error);\n    throw error;\n  }\n};\n\n// YENİ: Yeni ödeme yöntemi (kart) ekle\nexport const addPaymentMethod = async (paymentMethodData, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(paymentMethodData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemi eklenemedi.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"addPaymentMethod API hatası:\", error);\n    throw error;\n  }\n};\n\n// YENİ: Ödeme yöntemini (kartı) güncelle\nexport const updatePaymentMethod = async (paymentMethodId, paymentMethodData, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(paymentMethodData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemi güncellenemedi.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"updatePaymentMethod API hatası:\", error);\n    throw error;\n  }\n};\n\n// YENİ: Ödeme yöntemini (kartı) sil\nexport const deletePaymentMethod = async (paymentMethodId, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemi silinemedi.\");\n    }\n    return {\n      success: true,\n      message: \"Ödeme yöntemi başarıyla silindi.\"\n    };\n  } catch (error) {\n    console.error(\"deletePaymentMethod API hatası:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchUserPaymentMethods","token","response","fetch","method","headers","Authorization","ok","errorData","json","Error","message","error","console","addPaymentMethod","paymentMethodData","body","JSON","stringify","updatePaymentMethod","paymentMethodId","deletePaymentMethod","success"],"sources":["C:/Users/EFTA/Desktop/asdas2/frontend/src/api/userApi.js"],"sourcesContent":["// frontend/src/api/userApi.js (GÜNCEL HALİ - Ödeme Yöntemleri API çağrıları eklendi)\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api\";\r\n\r\n// ... (Mevcut fetchUserAddresses, addAddress, updateAddress, deleteAddress fonksiyonları burada) ...\r\n\r\n// YENİ: Kullanıcının tüm ödeme yöntemlerini getir\r\nexport const fetchUserPaymentMethods = async (token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemleri alınamadı.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"fetchUserPaymentMethods API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// YENİ: Yeni ödeme yöntemi (kart) ekle\r\nexport const addPaymentMethod = async (paymentMethodData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(paymentMethodData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemi eklenemedi.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"addPaymentMethod API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// YENİ: Ödeme yöntemini (kartı) güncelle\r\nexport const updatePaymentMethod = async (paymentMethodId, paymentMethodData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(paymentMethodData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemi güncellenemedi.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"updatePaymentMethod API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// YENİ: Ödeme yöntemini (kartı) sil\r\nexport const deletePaymentMethod = async (paymentMethodId, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemi silinemedi.\");\r\n    }\r\n    return { success: true, message: \"Ödeme yöntemi başarıyla silindi.\" };\r\n  } catch (error) {\r\n    console.error(\"deletePaymentMethod API hatası:\", error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}