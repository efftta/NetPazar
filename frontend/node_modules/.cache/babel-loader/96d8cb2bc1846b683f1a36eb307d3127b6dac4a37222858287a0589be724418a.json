{"ast":null,"code":"// frontend/src/api/userApi.js\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api\";\n\n// KULLANICI ADRES YÖNETİMİ FONKSİYONLARI\n// Kullanıcının tüm adreslerini getir\nexport const fetchUserAddresses = async token => {\n  // Token parametresini eklemeyi unutmayın\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Adresler alınamadı.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"fetchUserAddresses API hatası:\", error);\n    throw error;\n  }\n};\n\n// Yeni adres ekle\nexport const addAddress = async (addressData, token) => {\n  // Token parametresini eklemeyi unutmayın\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(addressData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Adres eklenemedi.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"addAddress API hatası:\", error);\n    throw error;\n  }\n};\n\n// Adresi güncelle\nexport const updateAddress = async (addressId, updatedData, token) => {\n  // Token parametresini eklemeyi unutmayın\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses/${addressId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Adres güncellenemedi.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"updateAddress API hatası:\", error);\n    throw error;\n  }\n};\n\n// Adresi sil\nexport const deleteAddress = async (addressId, token) => {\n  // Token parametresini eklemeyi unutmayın\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses/${addressId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Adres silinemedi.\");\n    }\n    return {\n      success: true,\n      message: \"Adres başarıyla silindi.\"\n    };\n  } catch (error) {\n    console.error(\"deleteAddress API hatası:\", error);\n    throw error;\n  }\n};\n\n// ÖDEME YÖNTEMLERİ FONKSİYONLARI\n// Kullanıcının tüm ödeme yöntemlerini getir\nexport const fetchUserPaymentMethods = async token => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemleri alınamadı.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"fetchUserPaymentMethods API hatası:\", error);\n    throw error;\n  }\n};\n\n// Yeni ödeme yöntemi (kart) ekle\nexport const addPaymentMethod = async (paymentMethodData, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(paymentMethodData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemi eklenemedi.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"addPaymentMethod API hatası:\", error);\n    throw error;\n  }\n};\n\n// Ödeme yöntemini (kartı) güncelle\nexport const updatePaymentMethod = async (paymentMethodId, paymentMethodData, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(paymentMethodData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemi güncellenemedi.\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"updatePaymentMethod API hatası:\", error);\n    throw error;\n  }\n};\n\n// Ödeme yöntemini (kartı) sil\nexport const deletePaymentMethod = async (paymentMethodId, token) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Ödeme yöntemi silinemedi.\");\n    }\n    return {\n      success: true,\n      message: \"Ödeme yöntemi başarıyla silindi.\"\n    };\n  } catch (error) {\n    console.error(\"deletePaymentMethod API hatası:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchUserAddresses","token","response","fetch","method","headers","Authorization","ok","errorData","json","Error","message","error","console","addAddress","addressData","body","JSON","stringify","updateAddress","addressId","updatedData","deleteAddress","success","fetchUserPaymentMethods","addPaymentMethod","paymentMethodData","updatePaymentMethod","paymentMethodId","deletePaymentMethod"],"sources":["C:/Users/EFTA/Desktop/Beykent Projeler/netpazar/NetPazar Teslim/frontend/src/api/userApi.js"],"sourcesContent":["// frontend/src/api/userApi.js\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000/api\";\r\n\r\n// KULLANICI ADRES YÖNETİMİ FONKSİYONLARI\r\n// Kullanıcının tüm adreslerini getir\r\nexport const fetchUserAddresses = async (token) => { // Token parametresini eklemeyi unutmayın\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Adresler alınamadı.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"fetchUserAddresses API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Yeni adres ekle\r\nexport const addAddress = async (addressData, token) => { // Token parametresini eklemeyi unutmayın\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(addressData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Adres eklenemedi.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"addAddress API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Adresi güncelle\r\nexport const updateAddress = async (addressId, updatedData, token) => { // Token parametresini eklemeyi unutmayın\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses/${addressId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(updatedData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Adres güncellenemedi.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"updateAddress API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Adresi sil\r\nexport const deleteAddress = async (addressId, token) => { // Token parametresini eklemeyi unutmayın\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/addresses/${addressId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Adres silinemedi.\");\r\n    }\r\n    return { success: true, message: \"Adres başarıyla silindi.\" };\r\n  } catch (error) {\r\n    console.error(\"deleteAddress API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// ÖDEME YÖNTEMLERİ FONKSİYONLARI\r\n// Kullanıcının tüm ödeme yöntemlerini getir\r\nexport const fetchUserPaymentMethods = async (token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemleri alınamadı.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"fetchUserPaymentMethods API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Yeni ödeme yöntemi (kart) ekle\r\nexport const addPaymentMethod = async (paymentMethodData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(paymentMethodData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemi eklenemedi.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"addPaymentMethod API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ödeme yöntemini (kartı) güncelle\r\nexport const updatePaymentMethod = async (paymentMethodId, paymentMethodData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(paymentMethodData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemi güncellenemedi.\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"updatePaymentMethod API hatası:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ödeme yöntemini (kartı) sil\r\nexport const deletePaymentMethod = async (paymentMethodId, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/users/profile/payment-methods/${paymentMethodId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Ödeme yöntemi silinemedi.\");\r\n    }\r\n    return { success: true, message: \"Ödeme yöntemi başarıyla silindi.\" };\r\n  } catch (error) {\r\n    console.error(\"deletePaymentMethod API hatası:\", error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}