{"ast":null,"code":"const API_BASE_URL = \"/api/auth\";\nexport const loginUser = async (email, password) => {\n  try {\n    const res = await fetch(`${API_BASE_URL}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || \"Giriş başarısız.\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Login API Error:\", error);\n    throw error;\n  }\n};\nexport const registerUser = async (username, email, password, confirmPassword) => {\n  try {\n    if (password !== confirmPassword) {\n      throw new Error(\"Şifreler eşleşmiyor.\");\n    }\n    const res = await fetch(`${API_BASE_URL}/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || \"Kayıt başarısız.\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Register API Error:\", error);\n    throw error;\n  }\n};\nexport const updateUserProfile = async (userData, token) => {\n  try {\n    const res = await fetch(`${API_BASE_URL}/profile`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || \"Profil güncelleme başarısız.\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Profile Update API Error:\", error);\n    throw error;\n  }\n};\n\n// Şifre sıfırlama (ileri kullanım için)\nexport const forgotPassword = async email => {\n  try {\n    const res = await fetch(`${API_BASE_URL}/forgot-password`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || \"Şifre sıfırlama talebi başarısız.\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Forgot Password API Error:\", error);\n    throw error;\n  }\n};\n\n// Şifre sıfırlama - yeni şifre ile güncelleme\nexport const resetPassword = async (email, newPassword) => {\n  try {\n    const res = await fetch(`${API_BASE_URL}/reset-password`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        newPassword\n      })\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || \"Şifre sıfırlama başarısız.\");\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Reset Password API Error:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","loginUser","email","password","res","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","error","console","registerUser","username","confirmPassword","updateUserProfile","userData","token","Authorization","forgotPassword","resetPassword","newPassword"],"sources":["C:/Users/EFTA/Desktop/Beykent Projeler/netpazar/NetPazar Teslim/frontend/src/api/authApi.js"],"sourcesContent":["const API_BASE_URL = \"/api/auth\";\r\n\r\nexport const loginUser = async (email, password) => {\r\n  try {\r\n    const res = await fetch(`${API_BASE_URL}/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      throw new Error(data.message || \"Giriş başarısız.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Login API Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const registerUser = async (username, email, password, confirmPassword) => {\r\n  try {\r\n    if (password !== confirmPassword) {\r\n      throw new Error(\"Şifreler eşleşmiyor.\");\r\n    }\r\n    const res = await fetch(`${API_BASE_URL}/register`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ username, email, password }),\r\n    });\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      throw new Error(data.message || \"Kayıt başarısız.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Register API Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUserProfile = async (userData, token) => {\r\n  try {\r\n    const res = await fetch(`${API_BASE_URL}/profile`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      throw new Error(data.message || \"Profil güncelleme başarısız.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Profile Update API Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Şifre sıfırlama (ileri kullanım için)\r\nexport const forgotPassword = async (email) => {\r\n  try {\r\n    const res = await fetch(`${API_BASE_URL}/forgot-password`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email }),\r\n    });\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      throw new Error(data.message || \"Şifre sıfırlama talebi başarısız.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Forgot Password API Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Şifre sıfırlama - yeni şifre ile güncelleme\r\nexport const resetPassword = async (email, newPassword) => {\r\n  try {\r\n    const res = await fetch(`${API_BASE_URL}/reset-password`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email, newPassword }),\r\n    });\r\n    const data = await res.json();\r\n    if (!res.ok) {\r\n      throw new Error(data.message || \"Şifre sıfırlama başarısız.\");\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Reset Password API Error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}