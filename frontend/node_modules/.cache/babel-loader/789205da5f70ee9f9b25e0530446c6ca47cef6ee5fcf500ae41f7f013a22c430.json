{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EFTA\\\\Desktop\\\\asdas2\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.jsx\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\n// authApi'den fonksiyonları import et\nimport { loginUser as apiLoginUser, registerUser as apiRegisterUser } from \"../api/authApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Sayfa yüklenirken durumu belirtmek için\n  // Token'ı state olarak tutabiliriz eğer Context üzerinden de paylaşılacaksa\n  const [authToken, setAuthToken] = useState(null);\n  useEffect(() => {\n    const tokenFromStorage = localStorage.getItem(\"token\"); // Daha açıklayıcı isim\n    const userData = localStorage.getItem(\"user\");\n    if (tokenFromStorage && userData) {\n      setIsAuthenticated(true);\n      setAuthToken(tokenFromStorage); // State'e token'ı kaydet\n      try {\n        setUser(JSON.parse(userData));\n      } catch (e) {\n        console.error(\"Error parsing user data from localStorage:\", e);\n        logout();\n      }\n    } else {\n      setIsAuthenticated(false);\n      setUser(null);\n      setAuthToken(null); // Token'ı da temizle\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const data = await apiLoginUser(email, password);\n      localStorage.setItem(\"token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      setIsAuthenticated(true);\n      setUser(data.user);\n      setAuthToken(data.token); // Başarılı girişte token'ı state'e kaydet\n      return true;\n    } catch (error) {\n      console.error(\"Login error in AuthContext:\", error.message);\n      return false;\n    }\n  };\n  const register = async (username, email, password, confirmPassword) => {\n    try {\n      const data = await apiRegisterUser(username, email, password, confirmPassword);\n      return true;\n    } catch (error) {\n      console.error(\"Register error in AuthContext:\", error.message);\n      throw error;\n    }\n  };\n  const updateProfile = updatedUserData => {\n    localStorage.setItem(\"user\", JSON.stringify(updatedUserData));\n    setUser(updatedUserData);\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setIsAuthenticated(false);\n    setUser(null);\n    setAuthToken(null); // Çıkışta token'ı temizle\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user,\n      loading,\n      token: authToken,\n      login,\n      logout,\n      register,\n      setUser: updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"M8t6dcBx8SxBzrpBRAOVQFluhFE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","loginUser","apiLoginUser","registerUser","apiRegisterUser","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","authToken","setAuthToken","tokenFromStorage","localStorage","getItem","userData","JSON","parse","e","console","error","logout","login","email","password","data","setItem","token","stringify","message","register","username","confirmPassword","updateProfile","updatedUserData","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/EFTA/Desktop/asdas2/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// src/context/AuthContext.jsx\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\n// authApi'den fonksiyonları import et\r\nimport { loginUser as apiLoginUser, registerUser as apiRegisterUser } from \"../api/authApi\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true); // Sayfa yüklenirken durumu belirtmek için\r\n  // Token'ı state olarak tutabiliriz eğer Context üzerinden de paylaşılacaksa\r\n  const [authToken, setAuthToken] = useState(null); \r\n\r\n  useEffect(() => {\r\n    const tokenFromStorage = localStorage.getItem(\"token\"); // Daha açıklayıcı isim\r\n    const userData = localStorage.getItem(\"user\");\r\n\r\n    if (tokenFromStorage && userData) {\r\n      setIsAuthenticated(true);\r\n      setAuthToken(tokenFromStorage); // State'e token'ı kaydet\r\n      try {\r\n        setUser(JSON.parse(userData));\r\n      } catch (e) {\r\n        console.error(\"Error parsing user data from localStorage:\", e);\r\n        logout();\r\n      }\r\n    } else {\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      setAuthToken(null); // Token'ı da temizle\r\n    }\r\n\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const data = await apiLoginUser(email, password);\r\n      localStorage.setItem(\"token\", data.token);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      setIsAuthenticated(true);\r\n      setUser(data.user);\r\n      setAuthToken(data.token); // Başarılı girişte token'ı state'e kaydet\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Login error in AuthContext:\", error.message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const register = async (username, email, password, confirmPassword) => {\r\n    try {\r\n      const data = await apiRegisterUser(username, email, password, confirmPassword);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Register error in AuthContext:\", error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateProfile = (updatedUserData) => {\r\n    localStorage.setItem(\"user\", JSON.stringify(updatedUserData));\r\n    setUser(updatedUserData);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n    setAuthToken(null); // Çıkışta token'ı temizle\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, user, loading, token: authToken, login, logout, register, setUser: updateProfile }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}